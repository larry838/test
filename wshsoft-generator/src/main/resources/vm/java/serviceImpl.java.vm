package ${basePackage}.${moduleName}.service.impl;

import java.util.List;
#if($table.tree)
import java.util.ArrayList;
import com.wshsoft.common.core.domain.Ztree;
import com.wshsoft.common.exception.BusinessException;
import org.springframework.transaction.annotation.Transactional;
import com.wshsoft.common.utils.StringUtils;
#end
import com.wshsoft.common.constant.SysConstants;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.wshsoft.common.utils.date.DateUtils;
#break
#end
#end
#if($table.sub)
import java.util.ArrayList;
import com.wshsoft.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.${ClassName}Service;
import com.wshsoft.common.core.text.Convert;

/**
 * ${functionName} Service业务层实现
 *
 * @author ${author}
 * @date ${datetime}
 */
 
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements ${ClassName}Service {
   
    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField})
    {
        return ${className}Mapper.select${ClassName}ById(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}) {
        return ${className}Mapper.select${ClassName}List(${className});
    }
    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub || $table.tree)
    @Transactional
#end
    @Override
    public int insert${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'createTime')
        ${className}.setCreateTime(DateUtils.getNowDate());
#end
#end    
#if($table.sub)
        int rows = ${className}Mapper.insert${ClassName}(${className});
        insert${subClassName}(${className});
        return rows;
#elseif($table.tree)
       ${ClassName} info = ${className}Mapper.selectById(${className}.getParentId());
        // 如果父节点不为"正常"状态,则不允许新增子节点
        if (!SysConstants._NORMAL.equals(info.getStatus()))
        {
            throw new BusinessException("${functionName}停用，不允许新增");
        }
        ${className}.setAncestors(info.getAncestors() + "," + ${className}.getParentId());
        return ${className}Mapper.insert(${className});        
#else
        return ${className}Mapper.insert${ClassName}(${className});
#end
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub || $table.tree)
    @Transactional
#end
    @Override
    public int update${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'updateTime')
        ${className}.setUpdateTime(DateUtils.getNowDate());
#end
#end
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
#elseif($table.tree)
        ${ClassName} newParent${ClassName} = ${className}Mapper.select${ClassName}ById(${className}.getParentId());
        ${ClassName} old${ClassName} = select${ClassName}ById(${className}.get${ClassName}Id());
        if (StringUtils.isNotNull(newParent${ClassName}) && StringUtils.isNotNull(old${ClassName}))
        {
            String newAncestors = newParent${ClassName}.getAncestors() + "," + newParent${ClassName}.get${ClassName}Id();
            String oldAncestors = old${ClassName}.getAncestors();
            ${className}.setAncestors(newAncestors);
            update${ClassName}Children(${className}.get${ClassName}Id(), newAncestors, oldAncestors);
        }
        int result = ${className}Mapper.updateById(${className});
        if (SysConstants._NORMAL.equals(${className}.getStatus()))
        {
            // 如果该${functionName}是启用状态，则启用该${functionName}的所有上级${functionName}
            updateParent${ClassName}Status(${className});
        }
        return result;
#else
        return ${className}Mapper.update${ClassName}(${className});
#end        
    }

    /**
     * 删除${functionName}对象
     * 
     * @param ids 需要删除的数据ID
     * @return 结果
     */
#if($table.sub || $table.tree)
    @Transactional
#end
    @Override
    public int delete${ClassName}ByIds(String ids)
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}s(Convert.toStrArray(ids));
#end
        return ${className}Mapper.delete${ClassName}ByIds(Convert.toStrArray(ids));
    }

    /**
     * 删除${functionName}信息
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField})
    {
#if($table.sub)
        ${className}Mapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
#end
        return ${className}Mapper.delete${ClassName}ById(${pkColumn.javaField});
    }
    
#if($table.tree)
    /**
     * 查询${functionName}树列表
     * 
     * @return 所有${functionName}信息
     */
    @Override
    public List<Ztree> select${ClassName}Tree() {
        List<${ClassName}> ${className}List = ${className}Mapper.select${ClassName}List(new ${ClassName}());
        List<Ztree> ztrees = new ArrayList<Ztree>();
        for (${ClassName} ${className} : ${className}List)
        {
            Ztree ztree = new Ztree();
#set($TreeCode=$treeCode.substring(0,1).toUpperCase() + ${treeCode.substring(1)})
#set($TreeParentCode=$treeParentCode.substring(0,1).toUpperCase() + ${treeParentCode.substring(1)})
#set($TreeName=$treeName.substring(0,1).toUpperCase() + ${treeName.substring(1)})
            ztree.setId(${className}.get${TreeCode}());
            ztree.setpId(${className}.get${TreeParentCode}());
            ztree.setName(${className}.get${TreeName}());
            ztree.setTitle(${className}.get${TreeName}());
            ztrees.add(ztree);
        }
        return ztrees;
    }

     /**
     * 修改该${functionName}的父级${functionName}状态
     * 
     * @param ${className} 当前${functionName}
     */
    private void updateParent${ClassName}Status(${ClassName} ${className})
    {
        ${className} = ${className}Mapper.select${ClassName}ById(${className}.get${ClassName}Id());
        ${className}Mapper.update${ClassName}Status(${className});
    }

    /**
     * 修改子元素关系
     * 
     * @param ${className}Id 被修改的${functionName}ID
     * @param newAncestors 新的父ID集合
     * @param oldAncestors 旧的父ID集合
     */
    private void update${ClassName}Children(Long ${className}Id, String newAncestors, String oldAncestors)
    {
        List<${ClassName}> children = ${className}Mapper.selectChildren${ClassName}ById(${className}Id);
        for (${ClassName} child : children)
        {
            child.setAncestors(child.getAncestors().replace(oldAncestors, newAncestors));
        }
        if (children.size() > 0)
        {
            ${className}Mapper.update${ClassName}Children(children);
        }
    }
  
#foreach ($column in $columns)
#if($column.isUnique())
#set($JavaField=$column.UpCaseField())
    /**
     * 校验${functionName}名称是否唯一
     * 
     * @param ${className} ${functionName}信息
     * @return 结果
     */
    public String check${JavaField}Unique(${ClassName} ${className}) {
        Long ${className}Id = StringUtils.isNull(${className}.get${ClassName}Id()) ? -1L : ${className}.get${ClassName}Id();
#if($table.tree)
        ${ClassName} info = ${className}Mapper.check${JavaField}Unique(${className}.get${JavaField}(), ${className}.getParentId());
#else
        ${ClassName} info = ${className}Mapper.check${JavaField}Unique(${className}.get${JavaField}());
#end
        if (StringUtils.isNotNull(info) && info.get${ClassName}Id().longValue() != ${className}Id.longValue()) {
            return SysConstants.BUSS_NAME_NOT_UNIQUE;
        }
        return SysConstants.BUSS_NAME_UNIQUE;
    }   
#end
#end  
    /**
     * 查询${functionName}个数
     * 
     * @param parentId 父${functionName}ID
     * @return 结果
     */
    public int select${ClassName}Count(Long parentId) {
          ${ClassName} ${className} = new ${ClassName}();
          ${className}.setParentId(parentId);
          return ${className}Mapper.select${ClassName}Count(${className});
    }

    /**
     * 查询${functionName}是否存在使用
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果 true 存在 false 不存在
     */
    public boolean check${ClassName}ExistUse(${pkColumn.javaType} ${pkColumn.javaField}) {
        int result = ${className}Mapper.check${ClassName}ExistUse(${pkColumn.javaField});
        return result > 0 ? true : false;
    }     
#end
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     * 
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className})
    {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        Long ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (StringUtils.isNotNull(${subclassName}List))
        {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                ${subclassName}.set${pkColumn.capJavaField}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                ${className}Mapper.batch${subClassName}(list);
            }
        }
    }
#end

}