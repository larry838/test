package ${basePackage}.${moduleName}.mapper;

import java.util.List;
import ${basePackage}.${moduleName}.domain.${ClassName};
#if($table.tree)
import org.apache.ibatis.annotations.Param;
#end
#if($table.sub)
import ${packageName}.domain.${subClassName};
#end
import com.baomidou.mybatisplus.core.mapper.BaseMapper;

/**
 * ${functionName} Mapper接口
 *
 * @author ${author}
 * @date ${datetime}
 */
 
public interface ${ClassName}Mapper extends BaseMapper<${ClassName}> {

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}集合
     */
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className});

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    public int insert${ClassName}(${ClassName} ${className});

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    public int update${ClassName}(${ClassName} ${className});

    /**
     * 删除${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的数据ID
     * @return 结果
     */
    public int delete${ClassName}ByIds(String[] ${pkColumn.javaField}s);
  
 #if($table.tree)   
    /**
     * 修改子元素关系
     * 
     * @param ${className}s 子元素
     * @return 结果
     */
    public int update${ClassName}Children(@Param("${className}s") List<${ClassName}> ${className}s);
    
    /**
     * 修改父级${functionName}状态
     * 
     * @param ${className} ${functionName}
     */
    public void update${ClassName}Status(${ClassName} ${className});

    /**
     * 根据ID查询所有子${functionName}
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}列表
     */
    public List<${ClassName}> selectChildren${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField});
    
    /**
     * 查询${functionName}个数
     * 
     * @param parentId 父${functionName}ID
     * @return 结果
     */
    public int select${ClassName}Count(${ClassName} ${className});

    /**
     * 查询${functionName}是否存在使用
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果 true 存在 false 不存在
     */
    public int check${ClassName}ExistUse(${pkColumn.javaType} ${pkColumn.javaField});
 #end
#foreach ($column in $columns)
#if($column.isUnique())
#set($JavaField=$column.UpCaseField())
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#if($table.tree)
    /**
     * 校验${functionName}名称是否唯一
     * 
     * @param ${className}Name ${functionName}名称
     * @param parentId 父${functionName}ID
     * @return 结果
     */
    public ${ClassName} check${JavaField}Unique(@Param("${javaField}") ${javaType} ${javaField}, @Param("parentId") Long parentId);
#else
    /**
     * 校验${functionName}名称是否唯一
     * 
     * @param ${className} ${functionName}信息
     * @return 结果
     */
    public ${ClassName} check${JavaField}Unique(${javaType} ${javaField});
#end
#end
#end  

#if($table.sub)

    /**
     * 批量删除${subTable.functionName}
     * 
     * @param customerIds 需要删除的数据ID
     * @return 结果
     */
    public int delete${subClassName}By${subTableFkClassName}s(String[] ${pkColumn.javaField}s);
    
    /**
     * 批量新增${subTable.functionName}
     * 
     * @param ${subclassName}List ${subTable.functionName}列表
     * @return 结果
     */
    public int batch${subClassName}(List<${subClassName}> ${subclassName}List);
    

    /**
     * 通过${functionName}ID删除${subTable.functionName}信息
     * 
     * @param roleId 角色ID
     * @return 结果
     */
    public int delete${subClassName}By${subTableFkClassName}(${pkColumn.javaType} ${pkColumn.javaField});
#end

}